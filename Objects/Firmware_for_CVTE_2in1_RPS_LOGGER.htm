<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Firmware_for_CVTE_2in1_RPS_LOGGER.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Firmware_for_CVTE_2in1_RPS_LOGGER.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Thu Aug 21 09:50:28 2025
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; App_Main_Loop &rArr; Dispfnc_Handler &rArr; Dispfnc_Display_Print_Funtions &rArr; Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[f]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[20]">DispCom_Buf_Get</a> from dispcom.o(.text.DispCom_Buf_Get) referenced from display.o(.text.Display_RxData_Update_Buf)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[7]">RTC_TAMP_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from debug.o(.text.TIM14_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[15]">TIM16_IRQHandler</a> from dispcom.o(.text.TIM16_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[16]">TIM17_IRQHandler</a> from timebase.o(.text.TIM17_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[21]">TM1650_Bit_Delay</a> from tm1650.o(.text.TM1650_Bit_Delay) referenced from tm1650.o(.text.TM1650_Tx_Byte)
 <LI><a href="#[1f]">TM1650_Display_Set_State_LED</a> from tm1650.o(.text.TM1650_Display_Set_State_LED) referenced from dispfnc.o(.text.Dispfnc_Right_Side_LEDs)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from dispcom.o(.text.USART1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from debug.o(.text.USART2_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1e]">__main</a> from __main.o(!!!main) referenced from startup_stm32g030xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[25]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[26]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[cb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[da]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[db]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[de]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[df]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[24]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[27]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[29]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; App_Main_Loop &rArr; Dispfnc_Handler &rArr; Dispfnc_Display_Print_Funtions &rArr; Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ea]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[30]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[32]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Data_Struct_Init
</UL>

<P><STRONG><a name="[eb]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Struct_Init
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Get_Realspeed_RPS
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Config_BAUD_Rate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Reg_Init
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_Num_Unsigned
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[ee]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[37]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[36]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[f1]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[f2]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[f3]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[28]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3c]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[3d]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[f4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[31]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>App_Main_Loop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text.App_Main_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = App_Main_Loop &rArr; Dispfnc_Handler &rArr; Dispfnc_Display_Print_Funtions &rArr; Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SubSecondsUpTime_Securely
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Scan_Sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>App_Setup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app.o(.text.App_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = App_Setup &rArr; TM1650_Init &rArr; TM1650_Clear_Display &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diag_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>CapTouch_Check_Touch_Duration</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, captouch.o(.text.CapTouch_Check_Touch_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CapTouch_Check_Touch_Duration &rArr; CapTouch_Check_Trigger &rArr; CapTouch_Response
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Check_Trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Scan_Sensors
</UL>

<P><STRONG><a name="[52]"></a>CapTouch_Check_Trigger</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, captouch.o(.text.CapTouch_Check_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CapTouch_Check_Trigger &rArr; CapTouch_Response
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Check_Touch_Duration
</UL>

<P><STRONG><a name="[4a]"></a>CapTouch_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, captouch.o(.text.CapTouch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CapTouch_Init &rArr; I2C2_Init &rArr; I2C2_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[90]"></a>CapTouch_Long_Pressed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, captouch.o(.text.CapTouch_Long_Pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CapTouch_Long_Pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Set_RPS_Handler
</UL>

<P><STRONG><a name="[53]"></a>CapTouch_Response</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, captouch.o(.text.CapTouch_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CapTouch_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Check_Trigger
</UL>

<P><STRONG><a name="[44]"></a>CapTouch_Scan_Sensors</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, captouch.o(.text.CapTouch_Scan_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CapTouch_Scan_Sensors &rArr; CapTouch_Check_Touch_Duration &rArr; CapTouch_Check_Trigger &rArr; CapTouch_Response
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Captouch_Sensors
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Check_Touch_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Loop
</UL>

<P><STRONG><a name="[8f]"></a>CapTouch_Short_Pressed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, captouch.o(.text.CapTouch_Short_Pressed))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Set_RPS_Handler
</UL>

<P><STRONG><a name="[54]"></a>CapTouch_Struct_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, captouch.o(.text.CapTouch_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CapTouch_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Init
</UL>

<P><STRONG><a name="[58]"></a>Debug_GPIO_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, debug.o(.text.Debug_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Debug_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
</UL>

<P><STRONG><a name="[4c]"></a>Debug_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, debug.o(.text.Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Debug_Init &rArr; Debug_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Timer_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Struct_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Reg_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[59]"></a>Debug_Reg_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, debug.o(.text.Debug_Reg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Debug_Reg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
</UL>

<P><STRONG><a name="[57]"></a>Debug_Struct_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, debug.o(.text.Debug_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
</UL>

<P><STRONG><a name="[5a]"></a>Debug_Timer_Init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, debug.o(.text.Debug_Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Init
</UL>

<P><STRONG><a name="[45]"></a>Diag_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, diag.o(.text.Diag_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Loop
</UL>

<P><STRONG><a name="[4f]"></a>Diag_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, diag.o(.text.Diag_Init))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[65]"></a>DispCom_Buf_Flush</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Buf_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_RX_Packet_Read_Complete
</UL>

<P><STRONG><a name="[20]"></a>DispCom_Buf_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Buf_Get))
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.Display_RxData_Update_Buf)
</UL>
<P><STRONG><a name="[5c]"></a>DispCom_CRC_Calculate_Block</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dispcom.o(.text.DispCom_CRC_Calculate_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_CRC_Calculate_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_Update_Buf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_RX_Packet_CRC_Check
</UL>

<P><STRONG><a name="[5d]"></a>DispCom_CRC_Calculate_Byte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_CRC_Calculate_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_CRC_Calculate_Block
</UL>

<P><STRONG><a name="[5e]"></a>DispCom_Config_BAUD_Rate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dispcom.o(.text.DispCom_Config_BAUD_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispCom_Config_BAUD_Rate
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[60]"></a>DispCom_Config_GPIO</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dispcom.o(.text.DispCom_Config_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispCom_Config_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[62]"></a>DispCom_Config_Rx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Config_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[63]"></a>DispCom_Config_Rx_Interrupt</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Config_Rx_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[61]"></a>DispCom_Config_Tx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Config_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[94]"></a>DispCom_Data_Available</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Data_Available))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
</UL>

<P><STRONG><a name="[c4]"></a>DispCom_ISR_Handler</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, dispcom.o(.text.DispCom_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DispCom_ISR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>DispCom_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dispcom.o(.text.DispCom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DispCom_Init &rArr; DispCom_Struct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Timer_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Struct_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Config_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Config_Rx_Interrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Config_Rx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Config_GPIO
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Config_BAUD_Rate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Buf_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[66]"></a>DispCom_RX_Packet_CRC_Check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dispcom.o(.text.DispCom_RX_Packet_CRC_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispCom_RX_Packet_CRC_Check &rArr; DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_CRC_Calculate_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Timer_ISR_Handler
</UL>

<P><STRONG><a name="[67]"></a>DispCom_RX_Packet_Read_Complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispcom.o(.text.DispCom_RX_Packet_Read_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispCom_RX_Packet_Read_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Buf_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Timer_ISR_Handler
</UL>

<P><STRONG><a name="[5f]"></a>DispCom_Struct_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dispcom.o(.text.DispCom_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispCom_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[68]"></a>DispCom_Timer_ISR_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dispcom.o(.text.DispCom_Timer_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DispCom_Timer_ISR_Handler &rArr; DispCom_RX_Packet_CRC_Check &rArr; DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_RX_Packet_Read_Complete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_RX_Packet_CRC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>DispCom_Timer_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Init
</UL>

<P><STRONG><a name="[69]"></a>DispCom_Tx_Buf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dispcom.o(.text.DispCom_Tx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DispCom_Tx_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Tx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_Handler
</UL>

<P><STRONG><a name="[6a]"></a>DispCom_Tx_Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dispcom.o(.text.DispCom_Tx_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Tx_Buf
</UL>

<P><STRONG><a name="[6b]"></a>Dispfnc_Display_Error_Mode_Print_Funtions</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Display_Error_Mode_Print_Funtions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Dispfnc_Display_Error_Mode_Print_Funtions &rArr; TM1650_Display_Print_CE &rArr; TM1650_Display_Write_Dig2 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Right_Side_LEDs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Left_Side_LEDs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_CE
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Print_Funtions
</UL>

<P><STRONG><a name="[6f]"></a>Dispfnc_Display_Normal_Mode_Print_Funtions</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Display_Normal_Mode_Print_Funtions))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Set_RPS_Handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_RPS_Print_And_LED_Handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Led_Ind_RPS_Inc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Led_Ind_RPS_Dec
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_CmdSpeed_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Print_Funtions
</UL>

<P><STRONG><a name="[75]"></a>Dispfnc_Display_Print_Funtions</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Display_Print_Funtions))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Dispfnc_Display_Print_Funtions &rArr; Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Normal_Mode_Print_Funtions
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Error_Mode_Print_Funtions
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Handler
</UL>

<P><STRONG><a name="[76]"></a>Dispfnc_Display_Repeated_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Display_Repeated_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dispfnc_Display_Repeated_Init &rArr; Dispfnc_Display_Repeated_Init_Timer_Init &rArr; Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init_Timer_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_System_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Handler
</UL>

<P><STRONG><a name="[79]"></a>Dispfnc_Display_Repeated_Init_Timer_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Display_Repeated_Init_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dispfnc_Display_Repeated_Init_Timer_Init &rArr; Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init
</UL>

<P><STRONG><a name="[7b]"></a>Dispfnc_Get_Realspeed_RPS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Get_Realspeed_RPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dispfnc_Get_Realspeed_RPS
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RxData_RealSpeed_Get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[7d]"></a>Dispfnc_Get_Rx_Packet_Error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Get_Rx_Packet_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dispfnc_Get_Rx_Packet_Error &rArr; Timebase_DownCounter_Expired_Event &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Expired_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
</UL>

<P><STRONG><a name="[47]"></a>Dispfnc_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Dispfnc_Handler &rArr; Dispfnc_Display_Print_Funtions &rArr; Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Print_Funtions
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Loop
</UL>

<P><STRONG><a name="[80]"></a>Dispfnc_Ind_LEDS_Off</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Ind_LEDS_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dispfnc_Ind_LEDS_Off &rArr; Dispfnc_Right_Side_LEDs
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Right_Side_LEDs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Left_Side_LEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_Toggle
</UL>

<P><STRONG><a name="[81]"></a>Dispfnc_Ind_LEDS_On</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Ind_LEDS_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dispfnc_Ind_LEDS_On &rArr; Dispfnc_Right_Side_LEDs
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Right_Side_LEDs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Left_Side_LEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_Toggle
</UL>

<P><STRONG><a name="[82]"></a>Dispfnc_Ind_LEDS_Toggle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Ind_LEDS_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dispfnc_Ind_LEDS_Toggle &rArr; Dispfnc_Ind_LEDS_On &rArr; Dispfnc_Right_Side_LEDs
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_On
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_RPS_Print_And_LED_Handler
</UL>

<P><STRONG><a name="[83]"></a>Dispfnc_Ind_Led_Time_Handler</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, dispfnc.o(.text.Dispfnc_Ind_Led_Time_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dispfnc_Ind_Led_Time_Handler &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Get_Realspeed_RPS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RxData_CmdSpeed_Get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_RPS_Print_And_LED_Handler
</UL>

<P><STRONG><a name="[50]"></a>Dispfnc_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dispfnc_Init &rArr; Dispfnc_Display_Repeated_Init_Timer_Init &rArr; Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Set_Rx_Packet_Timer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[8c]"></a>Dispfnc_Led_Ind_Neg_Led_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Led_Ind_Neg_Led_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Print_Number
</UL>

<P><STRONG><a name="[72]"></a>Dispfnc_Led_Ind_RPS_Dec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Led_Ind_RPS_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dispfnc_Led_Ind_RPS_Dec &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Normal_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[71]"></a>Dispfnc_Led_Ind_RPS_Inc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Led_Ind_RPS_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dispfnc_Led_Ind_RPS_Inc &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Normal_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[6d]"></a>Dispfnc_Left_Side_LEDs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dispfnc.o(.text.Dispfnc_Left_Side_LEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dispfnc_Left_Side_LEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_On
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_Off
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Error_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[8d]"></a>Dispfnc_Print_Number</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Print_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Led_Ind_Neg_Led_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_Num_Unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_RPS_Print_And_LED_Handler
</UL>

<P><STRONG><a name="[73]"></a>Dispfnc_RPS_Print_And_LED_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_RPS_Print_And_LED_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Print_Number
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Normal_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[6e]"></a>Dispfnc_Right_Side_LEDs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dispfnc.o(.text.Dispfnc_Right_Side_LEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dispfnc_Right_Side_LEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_On
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_LEDS_Off
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Error_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[70]"></a>Dispfnc_Set_RPS_Handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Set_RPS_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dispfnc_Set_RPS_Handler &rArr; CapTouch_Long_Pressed
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Short_Pressed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Long_Pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Normal_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[8b]"></a>Dispfnc_Set_Rx_Packet_Timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Set_Rx_Packet_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dispfnc_Set_Rx_Packet_Timer &rArr; Timebase_DownCounter_Set_Forcefully &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Forcefully
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
</UL>

<P><STRONG><a name="[7f]"></a>Dispfnc_Tx_Rx_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dispfnc.o(.text.Dispfnc_Tx_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Dispfnc_Tx_Rx_Handler &rArr; Dispfnc_Set_Rx_Packet_Timer &rArr; Timebase_DownCounter_Set_Forcefully &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Continuous_Expired_Event
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Set_Rx_Packet_Timer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Get_Rx_Packet_Error
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_Handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RxData_Update_Buf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_RX_Packet_Read_Complete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Data_Available
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Handler
</UL>

<P><STRONG><a name="[96]"></a>Display_Data_Struct_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, display.o(.text.Display_Data_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_Data_Struct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[4e]"></a>Display_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(.text.Display_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display_Init &rArr; Display_TxData_Update_Buf &rArr; DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_Update_Buf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Data_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[88]"></a>Display_RxData_CmdSpeed_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text.Display_RxData_CmdSpeed_Get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[7c]"></a>Display_RxData_RealSpeed_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text.Display_RxData_RealSpeed_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Get_Realspeed_RPS
</UL>

<P><STRONG><a name="[95]"></a>Display_RxData_Update_Buf</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, display.o(.text.Display_RxData_Update_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_RxData_Update_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
</UL>

<P><STRONG><a name="[74]"></a>Display_TxData_CmdSpeed_Set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(.text.Display_TxData_CmdSpeed_Set))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Normal_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[93]"></a>Display_TxData_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(.text.Display_TxData_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display_TxData_Handler &rArr; Display_TxData_Update_Buf &rArr; DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_Update_Buf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Tx_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
</UL>

<P><STRONG><a name="[97]"></a>Display_TxData_Update_Buf</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, display.o(.text.Display_TxData_Update_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_TxData_Update_Buf &rArr; DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_CRC_Calculate_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_TxData_Handler
</UL>

<P><STRONG><a name="[99]"></a>I2C2_Clock_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, captouch.o(.text.I2C2_Clock_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[9a]"></a>I2C2_Config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, captouch.o(.text.I2C2_Config))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[98]"></a>I2C2_GPIO_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, captouch.o(.text.I2C2_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[55]"></a>I2C2_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, captouch.o(.text.I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_Init &rArr; I2C2_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Init
</UL>

<P><STRONG><a name="[56]"></a>I2C2_Read_Captouch_Sensors</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, captouch.o(.text.I2C2_Read_Captouch_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_Read_Captouch_Sensors
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_TX_ADDR_READ
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_TX_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapTouch_Scan_Sensors
</UL>

<P><STRONG><a name="[9b]"></a>I2C2_TX_ADDR</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, captouch.o(.text.I2C2_TX_ADDR))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Captouch_Sensors
</UL>

<P><STRONG><a name="[9c]"></a>I2C2_TX_ADDR_READ</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, captouch.o(.text.I2C2_TX_ADDR_READ))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read_Captouch_Sensors
</UL>

<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, debug.o(.text.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM16_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispcom.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM16_IRQHandler &rArr; DispCom_Timer_ISR_Handler &rArr; DispCom_RX_Packet_CRC_Check &rArr; DispCom_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_Timer_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM17_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timebase.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM17_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_ISR_Executables
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>TM1650_Ack_Get_With_Timeout</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tm1650.o(.text.TM1650_Ack_Get_With_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Bit_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write
</UL>

<P><STRONG><a name="[21]"></a>TM1650_Bit_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tm1650.o(.text.TM1650_Bit_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Output
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Input
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Output
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Ack_Get_With_Timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm1650.o(.text.TM1650_Tx_Byte)
</UL>
<P><STRONG><a name="[a1]"></a>TM1650_Clear_Display</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Clear_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1650_Clear_Display &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Init
</UL>

<P><STRONG><a name="[6c]"></a>TM1650_Display_Print_CE</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Print_CE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TM1650_Display_Print_CE &rArr; TM1650_Display_Write_Dig2 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig1
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Error_Mode_Print_Funtions
</UL>

<P><STRONG><a name="[8e]"></a>TM1650_Display_Print_Num_Unsigned</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tm1650.o(.text.TM1650_Display_Print_Num_Unsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TM1650_Display_Print_Num_Unsigned &rArr; TM1650_Display_Write_Dig2 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Print_Number
</UL>

<P><STRONG><a name="[1f]"></a>TM1650_Display_Set_State_LED</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Set_State_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED9_LED10
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED1_LED8
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Led_Ind_RPS_Inc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Led_Ind_RPS_Dec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Led_Ind_Neg_Led_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispfnc.o(.text.Dispfnc_Right_Side_LEDs)
</UL>
<P><STRONG><a name="[a6]"></a>TM1650_Display_Set_State_LED1_LED8</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Set_State_LED1_LED8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TM1650_Display_Set_State_LED1_LED8 &rArr; TM1650_Display_Write_Dig3 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED
</UL>

<P><STRONG><a name="[a7]"></a>TM1650_Display_Set_State_LED9_LED10</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Set_State_LED9_LED10))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED
</UL>

<P><STRONG><a name="[a3]"></a>TM1650_Display_Write_Dig1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Write_Dig1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1650_Display_Write_Dig1 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_Num_Unsigned
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_CE
</UL>

<P><STRONG><a name="[a4]"></a>TM1650_Display_Write_Dig2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Write_Dig2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1650_Display_Write_Dig2 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_Num_Unsigned
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Print_CE
</UL>

<P><STRONG><a name="[a8]"></a>TM1650_Display_Write_Dig3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Write_Dig3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1650_Display_Write_Dig3 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED1_LED8
</UL>

<P><STRONG><a name="[a9]"></a>TM1650_Display_Write_Dig4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Display_Write_Dig4))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Set_State_LED9_LED10
</UL>

<P><STRONG><a name="[aa]"></a>TM1650_GPIO_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM1650_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Init
</UL>

<P><STRONG><a name="[4b]"></a>TM1650_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TM1650_Init &rArr; TM1650_Clear_Display &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Cmd_Sevenseg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Clear_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[ac]"></a>TM1650_SCL_Output</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_SCL_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM1650_SCL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Bit_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Set
</UL>

<P><STRONG><a name="[9f]"></a>TM1650_SCL_Set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_SCL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM1650_SCL_Set &rArr; TM1650_SCL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Tx_Byte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Ack_Get_With_Timeout
</UL>

<P><STRONG><a name="[a0]"></a>TM1650_SDA_Get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_SDA_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Ack_Get_With_Timeout
</UL>

<P><STRONG><a name="[ad]"></a>TM1650_SDA_Input</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_SDA_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Bit_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Get
</UL>

<P><STRONG><a name="[ae]"></a>TM1650_SDA_Output</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_SDA_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM1650_SDA_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Bit_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Set
</UL>

<P><STRONG><a name="[af]"></a>TM1650_SDA_Set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_SDA_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM1650_SDA_Set &rArr; TM1650_SDA_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Tx_Byte
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Start
</UL>

<P><STRONG><a name="[b0]"></a>TM1650_Start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tm1650.o(.text.TM1650_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM1650_Start &rArr; TM1650_SDA_Set &rArr; TM1650_SDA_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_System_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Cmd_Sevenseg
</UL>

<P><STRONG><a name="[b1]"></a>TM1650_Stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tm1650.o(.text.TM1650_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM1650_Stop &rArr; TM1650_SDA_Set &rArr; TM1650_SDA_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_System_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Cmd_Sevenseg
</UL>

<P><STRONG><a name="[b2]"></a>TM1650_Tx_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tm1650.o(.text.TM1650_Tx_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM1650_Tx_Byte &rArr; TM1650_SDA_Set &rArr; TM1650_SDA_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SDA_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write
</UL>

<P><STRONG><a name="[b3]"></a>TM1650_Write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Tx_Byte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Ack_Get_With_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_System_Cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write_Cmd_Sevenseg
</UL>

<P><STRONG><a name="[ab]"></a>TM1650_Write_Cmd_Sevenseg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tm1650.o(.text.TM1650_Write_Cmd_Sevenseg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM1650_Write_Cmd_Sevenseg &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Init
</UL>

<P><STRONG><a name="[a2]"></a>TM1650_Write_Data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tm1650.o(.text.TM1650_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Display_Write_Dig1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Clear_Display
</UL>

<P><STRONG><a name="[78]"></a>TM1650_Write_System_Cmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tm1650.o(.text.TM1650_Write_System_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM1650_Write_System_Cmd &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init
</UL>

<P><STRONG><a name="[92]"></a>Timebase_DownCounter_Continuous_Expired_Event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Continuous_Expired_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timebase_DownCounter_Continuous_Expired_Event &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Tx_Rx_Handler
</UL>

<P><STRONG><a name="[7e]"></a>Timebase_DownCounter_Expired_Event</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_Expired_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timebase_DownCounter_Expired_Event &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Get_Rx_Packet_Error
</UL>

<P><STRONG><a name="[b4]"></a>Timebase_DownCounter_Reset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Forcefully
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset_All
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Expired_Event
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Continuous_Expired_Event
</UL>

<P><STRONG><a name="[b5]"></a>Timebase_DownCounter_Reset_All</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_Reset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timebase_DownCounter_Reset_All &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Reset
</UL>

<P><STRONG><a name="[77]"></a>Timebase_DownCounter_SS_Expired_Event</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Expired_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timebase_DownCounter_SS_Expired_Event &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_RPS_Print_And_LED_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init
</UL>

<P><STRONG><a name="[b6]"></a>Timebase_DownCounter_SS_Reset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timebase_DownCounter_SS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset_All
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
</UL>

<P><STRONG><a name="[b7]"></a>Timebase_DownCounter_SS_Reset_All</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Reset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timebase_DownCounter_SS_Reset_All &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Reset
</UL>

<P><STRONG><a name="[7a]"></a>Timebase_DownCounter_SS_Set_Forcefully</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Forcefully))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Display_Repeated_Init_Timer_Init
</UL>

<P><STRONG><a name="[8a]"></a>Timebase_DownCounter_SS_Set_Securely</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Securely))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timebase_DownCounter_SS_Set_Securely &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Start
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_RPS_Print_And_LED_Handler
</UL>

<P><STRONG><a name="[b9]"></a>Timebase_DownCounter_SS_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_DownCounter_SS_Start))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[ba]"></a>Timebase_DownCounter_SS_Update</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, timebase.o(.text.Timebase_DownCounter_SS_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timebase_DownCounter_SS_Update &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update_All
</UL>

<P><STRONG><a name="[bb]"></a>Timebase_DownCounter_SS_Update_All</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Update_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timebase_DownCounter_SS_Update_All &rArr; Timebase_DownCounter_SS_Update &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
</UL>

<P><STRONG><a name="[91]"></a>Timebase_DownCounter_Set_Forcefully</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Set_Forcefully))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timebase_DownCounter_Set_Forcefully &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Set_Rx_Packet_Timer
</UL>

<P><STRONG><a name="[89]"></a>Timebase_DownCounter_Set_Securely</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_Set_Securely))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_Set_Securely
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Forcefully
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Continuous_Expired_Event
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Init
</UL>

<P><STRONG><a name="[bc]"></a>Timebase_DownCounter_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_DownCounter_Start))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
</UL>

<P><STRONG><a name="[bd]"></a>Timebase_DownCounter_Update</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timebase_DownCounter_Update &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update_All
</UL>

<P><STRONG><a name="[be]"></a>Timebase_DownCounter_Update_All</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_Update_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timebase_DownCounter_Update_All &rArr; Timebase_DownCounter_Update &rArr; Timebase_DownCounter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
</UL>

<P><STRONG><a name="[9d]"></a>Timebase_ISR_Executables</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_ISR_Executables))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>Timebase_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timebase_Init &rArr; Timebase_Reset &rArr; Timebase_DownCounter_SS_Reset_All &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Struct_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
</UL>

<P><STRONG><a name="[46]"></a>Timebase_Main_Loop_Executables</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_Main_Loop_Executables))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timebase_Main_Loop_Executables &rArr; Timebase_DownCounter_SS_Update_All &rArr; Timebase_DownCounter_SS_Update &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Sync_With_Shadow_Variables
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update_All
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update_All
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Loop
</UL>

<P><STRONG><a name="[c1]"></a>Timebase_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timebase_Reset &rArr; Timebase_DownCounter_SS_Reset_All &rArr; Timebase_DownCounter_SS_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset_All
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset_All
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>

<P><STRONG><a name="[bf]"></a>Timebase_Struct_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timebase_Struct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>

<P><STRONG><a name="[c0]"></a>Timebase_Timer_Enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_Timer_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timebase_Timer_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>

<P><STRONG><a name="[43]"></a>Timebase_Timer_Get_SubSecondsUpTime_Securely</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Timer_Get_SubSecondsUpTime_Securely))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Loop
</UL>

<P><STRONG><a name="[c2]"></a>Timebase_Timer_Sync_With_Shadow_Variables</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Timer_Sync_With_Shadow_Variables))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
</UL>

<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispcom.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_IRQHandler &rArr; DispCom_ISR_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCom_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, debug.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; App_Main_Loop &rArr; Dispfnc_Handler &rArr; Dispfnc_Display_Print_Funtions &rArr; Dispfnc_Display_Normal_Mode_Print_Funtions &rArr; Dispfnc_RPS_Print_And_LED_Handler &rArr; Dispfnc_Print_Number &rArr; Dispfnc_Led_Ind_Neg_Led_Set &rArr; TM1650_Display_Set_State_LED &rArr; TM1650_Display_Set_State_LED9_LED10 &rArr; TM1650_Display_Write_Dig4 &rArr; TM1650_Write_Data &rArr; TM1650_Write &rArr; TM1650_Ack_Get_With_Timeout &rArr; TM1650_SDA_Get &rArr; TM1650_SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Setup
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Main_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[c5]"></a>_dgeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispfnc_Ind_Led_Time_Handler
</UL>

<P><STRONG><a name="[c7]"></a>_dgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[c6]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
